name: 'Open Version Bump PR'

on:
  pull_request:
    types:
      - closed

jobs:
  preflight: # Check that labels include a version bump, and extract the version bump label
    runs-on: ubuntu-latest
    if: (github.event.pull_request.merged == true)
    outputs:
      VERSION_INSTRUCTION: ${{ steps.validate.outputs.VERSION_INSTRUCTION }}
    steps:
      - uses: actions/checkout@v3
      - id: validate
        name: Validate that version bump labels are on the PR
        uses: ./.github/actions/validate-version-labels
        with:
          LABELS: ${{ join(github.event.pull_request.labels.*.name, ',') || inputs.version-type }}
  createVersionBumpPR:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: preflight
    outputs:
      PR_NUMBER: ${{ steps.create-pr.outputs.pull-request-number }}
      PR_URL: ${{ steps.create-pr.outputs.pull-request-url }}
      VERSION_TAG: ${{ steps.tick-version.outputs.VERSION_TAG }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-git-credentials
      - id: tick-version
        run: |
          VERSION_INSTRUCTION=${{ needs.preflight.outputs.VERSION_INSTRUCTION }}
          echo "version instruction $VERSION_INSTRUCTION"
          npm version $VERSION_INSTRUCTION
          PACKAGE_VERSION=$(cat package.json \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[", ]//g')  
          echo "VERSION_TAG=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      - name: Create commit
        id: create-commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILE_TO_COMMIT: package.json
          VERSION_BRANCH: "version-bump"
        run: |
          # start with creating new branch 'version-bump/VERSION_TAG', also update the reference to the origin if it doesn't exist
          git checkout -b $VERSION_BRANCH
          if ! gh api -X GET /repos/:owner/:repo/git/ref/heads/$VERSION_BRANCH >/dev/null 2>&1; then
            echo "creating new branch"
            gh api -X POST /repos/:owner/:repo/git/refs -f ref="refs/heads/main" -f sha="$GITHUB_SHA" -f "ref=refs/heads/$VERSION_BRANCH"
          fi
          
          PACKAGE_JSON_CONTENT=$(gh api --method GET /repos/:owner/:repo/contents/package.json \
              -f "ref=refs/heads/$VERSION_BRANCH" \
              | jq -r '.content' \
              | base64 -d)

          CURRENT_ORIGIN_VERSION=$(echo "$PACKAGE_JSON_CONTENT" | jq -r '.version')
          NEW_VERSION="${{ steps.tick-version.outputs.VERSION_TAG }}"
          
          echo "CURRENT_ORIGIN_VERSION $CURRENT_ORIGIN_VERSION"
          echo "NEW_VERSION $NEW_VERSION"
          
          if [ "$(echo "$NEW_VERSION" | tr -d '.')" -gt "$(echo "$CURRENT_ORIGIN_VERSION" | tr -d '.')" ]; then
           # move the branch pointer one commit backwards so that we can manually commit changes done by 'npm version ...' command
            git reset HEAD~
          
            # create a commit with content of package.json. This will give us 'verified' commit label from github actions bot
            MESSAGE="${{ steps.tick-version.outputs.VERSION_TAG }}"
            SHA=$( git rev-parse $VERSION_BRANCH:$FILE_TO_COMMIT )
            CONTENT=$( base64 -i $FILE_TO_COMMIT )
            NEW_COMMIT_SHA=$(gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
             --field message="$MESSAGE" \
             --field content="$CONTENT" \
            --field encoding="base64" \
            --field branch="$VERSION_BRANCH" \
            --field sha="$SHA" | jq -r '.commit.sha')
          
            # create a tag from VERSION_TAG
            TAG_RESPONSE=$(gh api --method POST /repos/:owner/:repo/git/tags \
            --field tag="v${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field message="${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field object="$NEW_COMMIT_SHA" \
            --field type="commit")
          
            NEW_TAG_SHA=$(echo "$TAG_RESPONSE" | jq -r '.sha')
          
            # update the reference so that the tag is visible in github
            gh api --method POST /repos/:owner/:repo/git/refs \
            --field ref="refs/tags/v${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field sha="$NEW_TAG_SHA"  
          fi
          echo "VERSION_BRANCH=$VERSION_BRANCH" >> $GITHUB_OUTPUT
      - name: Create PR
        id: create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # at this point either new branch with one new commit is created so we open PR, or we get the open PR and set the outputs
          pullRequest=$(gh api --method GET "/repos/:owner/:repo/pulls" --jq ".[] | select(.head.ref == \"${{ steps.create-commit.outputs.VERSION_BRANCH }}\" and .state == \"open\") | {url: .html_url, number: .number}")
          
          if [[ -z "$pullRequest" ]]; then
            echo "No pull requests found for branch ${{ steps.create-commit.outputs.VERSION_BRANCH }}, creating new PR"
            response=$(gh api --method POST /repos/:owner/:repo/pulls \
            --field title="Bump version to ${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field body="This PR bumps the version to ${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field head="${{ steps.create-commit.outputs.VERSION_BRANCH }}" \
            --field base="${{ github.base_ref || 'main' }}")
          
            pr_url=$(echo $response | jq -r '.html_url')
            pr_number=$(echo $response | jq -r '.number')
          
            echo "pull-request-number=$pr_number" >> $GITHUB_OUTPUT
            echo "pull-request-url=$pr_url" >> $GITHUB_OUTPUT
          
            # as a last step we create a label for PR
            gh api --method POST "/repos/:owner/:repo/issues/$pr_number/labels" -F "labels[]=version-bump"
          else
            echo "Pull requests found for branch ${{ steps.create-commit.outputs.VERSION_BRANCH }}, setting outputs"
            pr_url=$(echo "$pullRequest" | jq -r '.url')
            pr_number=$(echo "$pullRequest" | jq -r '.number')
          
            echo "pull-request-number=$pr_number" >> $GITHUB_OUTPUT
            echo "pull-request-url=$pr_url" >> $GITHUB_OUTPUT
          fi
          

  post-result-to-pr:
    runs-on: ubuntu-latest
    if: ${{ always() }} # Always run, even if a previous step fails, since we always want to post a result message/comment
    needs:
      - createVersionBumpPR
    steps:
      - name: Post success or failure comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            // `needs` isn't loaded into `actions/github-script@v6`.context, so we have to read it from the outer context
            // Using toJSON will dump a string representation of the object verbatim, which effective generates code for the `needs` javascript variable below
            const needs = ${{ toJSON(needs) }}
            // Note, it's possible to iterate over jobs to show multiple failures, but we instead consolidate since each job depends on the prior.
            // needs["JOB"] will be undefined for skipped jobs, so spreading will show the latest failure in the chain
            const { VERSION_TAG, PR_URL, JOB_NAME } = {
              ...needs?.createVersionBumpPR?.outputs,
            }
            
            // delete the coverage-pr branch if it exists
            const ref = `heads/coverage-pr-${context.payload.pull_request.number}`
            try {
            const coverageRef = await github.rest.git.getRef({
               owner: context.repo.owner,
               repo: context.repo.repo,
               ref,
              });
              console.log('coverageRef', coverageRef)
              if (coverageRef && coverageRef.data && coverageRef.data.ref) {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo:  context.repo.repo,
                  ref,
                });
                 console.log('coverageRef deleted')
              }
            }catch(error) {}
            
            
            if(!JOB_NAME) {
              core.notice("No job name found, won't post comment to PR")
              return
            }
