name: Format code with Prettier and open pull request

on:
  pull_request:
    types:
      - closed

jobs:
  createPullRequest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: yarn

      - name: Set up Git credentials
        uses: ./.github/actions/setup-git-credentials

      - name: Bump version
        run: yarn version --major

      - name: get version
        id: tick-version
        run: |
          PACKAGE_VERSION=$(cat package.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[", ]//g')  
          echo "VERSION_TAG=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      - name: Create commit
        id: create-commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILE_TO_COMMIT: package.json
          VERSION_BRANCH: "version-bump/${{ steps.tick-version.outputs.VERSION_TAG }}"
        run: |
          # start with creating new branch 'version-bump/VERSION_TAG', also update the reference to the origin
          git checkout -b $VERSION_BRANCH
          echo "before"
          if ! gh api -X GET /repos/:owner/:repo/git/ref/heads/$VERSION_BRANCH >/dev/null 2>&1; then
            echo "creating new branch"
             gh api -X POST /repos/:owner/:repo/git/refs -f ref="refs/heads/main" -f sha="$GITHUB_SHA" -f "ref=refs/heads/$VERSION_BRANCH"
          else
            echo "updating  branch"
            gh api -X PATCH /repos/:owner/:repo/git/refs/heads/$VERSION_BRANCH -f sha="$GITHUB_SHA" -f "ref=refs/heads/$VERSION_BRANCH" -F force=true
          fi
          echo "VERSION_BRANCH=$VERSION_BRANCH" >> $GITHUB_OUTPUT
          echo "after"
          
          # move the branch pointer one commit backwards so that we can manually commit changes done by 'npm version ...' command
          git reset HEAD~
          
          # create a commit with content of package.json. This will give us 'verified' commit label from github actions bot
          MESSAGE="${{ steps.tick-version.outputs.VERSION_TAG }}"
          SHA=$( git rev-parse $VERSION_BRANCH:$FILE_TO_COMMIT )
          CONTENT=$( base64 -i $FILE_TO_COMMIT )
          NEW_COMMIT_SHA=$(gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
           --field message="$MESSAGE" \
           --field content="$CONTENT" \
          --field encoding="base64" \
          --field branch="$VERSION_BRANCH" \
          --field sha="$SHA" | jq -r '.commit.sha')
          
          

      - name: Create PR
        id: create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # at this point the new branch with one new commit is created so we open PR 
          response=$(gh api --method POST /repos/:owner/:repo/pulls \
          --field title="Bump version to ${{ steps.tick-version.outputs.VERSION_TAG }}" \
          --field body="This PR was created by the [createVersionBumpPR](./.github/actions/tick-version) GitHub action. It will be merged automatically once checks are successful." \
          --field head="${{ steps.create-commit.outputs.VERSION_BRANCH }}" \
          --field base="${{ github.base_ref || 'main' }}")
            
          pr_url=$(echo $response | jq -r '.html_url')
          pr_number=$(echo $response | jq -r '.number')
        
          echo "pull-request-number=$pr_number" >> $GITHUB_OUTPUT
          echo "pull-request-url=$pr_url" >> $GITHUB_OUTPUT
          
          # as a last step we create a label for PR
          gh api --method PATCH /repos/:owner/:repo/issues/$pr_number \
          --input - << EOF
          { 
            "labels":["version-bump"]
          }
          EOF