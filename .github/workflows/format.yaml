name: Format code with Prettier and open pull request

on:
  pull_request:
    types:
      - closed

jobs:
  createPullRequest:
    if: github.event.pull_request.merged == true
    outputs:
      PR_NUMBER: ${{ steps.create-pr.outputs.pull-request-number }}
      PR_URL: ${{ steps.create-pr.outputs.pull-request-url }}
      VERSION_TAG: ${{ steps.tick-version.outputs.VERSION_TAG }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: yarn

      - name: Set up Git credentials
        uses: ./.github/actions/setup-git-credentials

      - name: Bump version
        run: yarn version --major

      - name: get version
        id: tick-version
        run: |
          PACKAGE_VERSION=$(cat package.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[", ]//g')  
          echo "VERSION_TAG=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      - name: Create commit
        id: create-commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILE_TO_COMMIT: package.json
          VERSION_BRANCH: "version-bump/${{ steps.tick-version.outputs.VERSION_TAG }}"
        run: |
          # start with creating new branch 'version-bump/VERSION_TAG', also update the reference to the origin if it doesn't exist
          git checkout -b $VERSION_BRANCH
          if ! gh api -X GET /repos/:owner/:repo/git/ref/heads/$VERSION_BRANCH >/dev/null 2>&1; then
            echo "creating new branch"
            gh api -X POST /repos/:owner/:repo/git/refs -f ref="refs/heads/main" -f sha="$GITHUB_SHA" -f "ref=refs/heads/$VERSION_BRANCH"
            
            # move the branch pointer one commit backwards so that we can manually commit changes done by 'npm version ...' command
            git reset HEAD~
            
            # create a commit with content of package.json. This will give us 'verified' commit label from github actions bot
            MESSAGE="${{ steps.tick-version.outputs.VERSION_TAG }}"
            SHA=$( git rev-parse $VERSION_BRANCH:$FILE_TO_COMMIT )
            CONTENT=$( base64 -i $FILE_TO_COMMIT )
            NEW_COMMIT_SHA=$(gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
             --field message="$MESSAGE" \
             --field content="$CONTENT" \
            --field encoding="base64" \
            --field branch="$VERSION_BRANCH" \
            --field sha="$SHA" | jq -r '.commit.sha')
            
            # create a tag from VERSION_TAG
            TAG_RESPONSE=$(gh api --method POST /repos/:owner/:repo/git/tags \
            --field tag="v${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field message="${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field object="$NEW_COMMIT_SHA" \
            --field type="commit")
        
            NEW_TAG_SHA=$(echo "$TAG_RESPONSE" | jq -r '.sha')
            
            # update the reference so that the tag is visible in github
            gh api --method POST /repos/:owner/:repo/git/refs \
            --field ref="refs/tags/v${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field sha="$NEW_TAG_SHA"
          fi
          # branch exists so we just set the output
          echo "VERSION_BRANCH=$VERSION_BRANCH" >> $GITHUB_OUTPUT
      - name: Create PR
        id: create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # at this point  either new branch with one new commit is created so we open PR, or we get the open PR and set the outputs
          pullRequest=$(gh api --method GET "/repos/:owner/:repo/pulls" --jq ".[] | select(.head.ref == \"${{ steps.create-commit.outputs.VERSION_BRANCH }}\" and .state == \"open\") | {url: .html_url, number: .number}")
          
          if [[ -z "$pullRequest" ]]; then
            echo "No pull requests found for branch ${{ steps.create-commit.outputs.VERSION_BRANCH }}, creating new PR"
            response=$(gh api --method POST /repos/:owner/:repo/pulls \
            --field title="Bump version to ${{ steps.tick-version.outputs.VERSION_TAG }}" \
            --field body="" \
            --field head="${{ steps.create-commit.outputs.VERSION_BRANCH }}" \
            --field base="${{ github.base_ref || 'main' }}")
            
            pr_url=$(echo $response | jq -r '.html_url')
            pr_number=$(echo $response | jq -r '.number')
            
            echo "pull-request-number=$pr_number" >> $GITHUB_OUTPUT
            echo "pull-request-url=$pr_url" >> $GITHUB_OUTPUT
            
            # as a last step we create a label for PR
            gh api -X POST "/repos/:owner/:repo/issues/$pr_number/labels" -F "labels[]=version-bump"

          else
            echo "Pull requests found for branch ${{ steps.create-commit.outputs.VERSION_BRANCH }}, setting outputs"
            pr_url=$(echo "$pullRequest" | jq -r '.html_url')
            pr_number=$(echo "$pullRequest" | jq -r '.number')
            
            echo "pull-request-number=$pr_number" >> $GITHUB_OUTPUT
            echo "pull-request-url=$pr_url" >> $GITHUB_OUTPUT
          fi
  post-result-to-pr:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - createPullRequest
    steps:
      - name: Post success or failure comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            const needs = ${{ toJSON(needs) }}
            // Note, it's possible to iterate over jobs to show multiple failures, but we instead consolidate since each job depends on the prior.
            // needs["JOB"] will be undefined for skipped jobs, so spreading will show the latest failure in the chain
            const { VERSION_TAG, PR_URL } = {
              ...needs?.createPullRequest?.outputs,
            }
            if(context.eventName == 'pull_request'){
                         github.rest.issues.createComment({
                           issue_number: context.issue.number,
                           owner: context.repo.owner,
                           repo: context.repo.repo,
                           body: `:rocket: Successfully created version bump PR: ${PR_URL}`
                         })
                       }